"" ctang's vimrc
"#--------------------------------------------------- "

"==================================================  for Vundle vundle
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
"
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'

" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'

" add nerdtree
Plugin 'scrooloose/nerdtree'
Plugin 'kien/ctrlp.vim'
Plugin 'Lokaltog/vim-powerline'
Plugin 'scrooloose/nerdcommenter'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'jacquesbh/vim-showmarks'
"Plugin 'rakr/vim-togglebg'
Plugin 'vim-scripts/bash-support.vim'
Plugin 'vim-scripts/c.vim'
Plugin 'tpope/vim-surround'
Plugin 'vim-scripts/taglist.vim'
Plugin 'vim-scripts/YankRing.vim'
Plugin 'vim-scripts/mru.vim'
Plugin 'vim-scripts/applescript.vim'
Plugin 'vim-scripts/python.vim'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"================================================== 
"
"
"
"
"
"
"
"=================================================== basic setting
let mapleader = ";"


set encoding=utf-8 
"set map as ;1 to show the encoding
nmap <leader>1 :set<space>fileencoding<cr>

syntax on
set nu
set showmatch
set tabstop=4
set incsearch
set background=dark
set shiftwidth=4
set autoindent
set cindent
filetype plugin indent on
filetype plugin on

"=================================================== highlighting
" high light searching
set hlsearch
" highlighting more than 100 iterms
highlight OverLength ctermbg=red ctermfg=white guibg=red guifg=white
match OverLength '\%101v.*'

set history=200

"=================================================== have statusbar always
set laststatus=2
" spiiph's
set statusline=
set statusline+=%<\                       " cut at start
set statusline+=%2*[%n%H%M%R%W]%*\        " flags and buf no
set statusline+=%-40f\                    " path
set statusline+=%=%1*%y%*%*\              " file type
set statusline+=%10((%l,%c)%)\            " line and column
set statusline+=%P                        " percentage of file

" jamessan's
set statusline=   " clear the statusline for when vimrc is
"reloaded
set statusline+=%-3.3n\                      " buffer number
set statusline+=%f\                          " file name
set statusline+=%h%m%r%w                     " flags
set statusline+=[%{strlen(&ft)?&ft:'none'},  " filetype
set statusline+=%{strlen(&fenc)?&fenc:&enc}, " encoding
set statusline+=%{&fileformat}]              " file format
set statusline+=%=                           " right align
set statusline+=%{synIDattr(synID(line('.'),col('.'),1),'name')}\
" highlight
set statusline+=%b,0x%-8B\                   " current char
set statusline+=%-14.(%l,%c%V%)\ %<%P        " offset

" another
set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y%=%c,%l/%L\ %P
"=================================================== backup
set swapfile
set dir=~/.vim/tmp
set backupdir=~/.vim/tmp

"set nobackup       #no backup files
"set nowritebackup  #only in case you don't want a backup file while editing
"set noswapfile     #no swap files
"
"================================================== fold
"Enable folding
set foldmethod=indent
set foldlevel=99

"Enable folding with the spacebar
nnoremap <space> za
"==================================================================
"============================= for tags and Tlist
set tags=/Users/ctang/.vim/tags
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
let Tlist_Auto_Open=0
let Tlist_Use_SingleClick=1
" 这项必须设定，否则出错,配置taglist的ctags路径
" 不同时显示多个文件的 tag ，只显示当前文件的
" 如果 taglist 窗口是最后一个窗口，则退出 vim
" "让当前不被编辑的文件的方法列表自动折叠起来 
"let Tlist_File_Fold_Auto_Close=1
"     "把taglist窗口放在屏幕的右侧，缺省在左侧 
let Tlist_Use_Right_Window=1 
"      "显示taglist菜单
let Tlist_Show_Menu=1
"       "启动vim自动打开taglist
"  let Tlist_Auto_Open=1 

set cscopequickfix=s-,c-,d-,i-,t-,e-
cs add /Users/ctang/.vim/cscope.out  /Users/ctang/.vim/ 
"=================================================set for colorschrme
syntax enable
if has('gui_running')
set background=light
else
set background=dark
endif
"colorscheme desertEx
let g:solarized_menu=1
"colorscheme solarized
"=======================================
"                                                           taglist
let Tlist_Use_LEFT_Window=1 "default
let Tlist_File_Fold_Auto_Close=1
let Tlist_Show_One_File=1
let Tlist_GainFocus_On_ToggleOpen=1
let Tlist_Exit_OnlyWindow=1
"let g:winManagerWindowLayout=’FileExplorer’
nmap tl :Tlist<cr>
let Tlist_Ctags_Cmd = '/usr/local/bin/ctags'
let Tlist_WinHeight=100
let Tlist_WinWidth=30
let Tlist_Use_Singleclick=1
let Tlist_Use_Right_Window=0
let Tlist_Show_Menu=1
"let Tlist_Max_Submenu_Iterms=20
"let Tlist_Max_Tag_Length=10
inoremap <C-]>             <C-X><C-]>
inoremap <C-F>             <C-X><C-F>
inoremap <C-D>             <C-X><C-D>
inoremap <C-L>             <C-X><C-L>
inoremap <C-P>             <C-N><C-P>
let g:SuperTabRetainCompletionType = 2
let g:SuperTabDefaultCompletionType = "<C-N><C-P>" 
set autowrite
set showmode
set smarttab
set title
"=================================================
set mouse=a
"set mouse=na
"set mouse=h
"set mouse=c
"====================================================
"用tab补全 complete use qq(ee)  instead
fun! KeywordComplete()
let left = strpart(getline('.'), col('.') - 2, 1)
if left =~ "^$"
	return "\<Tab>"
elseif left =~ ' $'
	return "\<Tab>"
elseif left =~ '\<Tab>$'
	return "\<Tab>"
elseif left =~ '	$'
	return "\<Tab>"
elseif left=~'=$'
	return "\<Tab>"
else
	return "\<C-N>"
endfun
inoremap <silent> <Tab> <C-R>=KeywordComplete()<CR>
"===========================
"set for emenu
source $VIMRUNTIME/menu.vim
set wildmenu
set cpo-=<
set wcm=<C-Z>
nmap ;em :emenu <C-Z>
"===========================================================
"================================ map for c program
nm t; ggO#include<stdio.h><esc>
nm tb o#include<stdlib.h><esc>
nm ts o#include<string.h><esc>
nm tm o#include<math.h><esc>
nm tt o#include<time.h><esc>
nm ti o#include<ifunction.h><esc>
"==============================================================  for VIM
set modifiable " for the buffer
nmap mm :w<cr>
nmap qa :qa<cr>
nmap q! :q!<cr>
nmap <backspace> i<backspace><esc>l
nmap <leader>p o<esc>0i#===================================================<space>
"nmap <leader>- o<esc>0i#---------------------------------------------------<space>
"=================================================== for the arrows
"                只要是屏幕显示出的行，你都可以用它们在其中上下移动
map <Up> gk
map <Down> gj
nmap <leader>r :reg<cr>
"================================ map for c.vim
nm z; \cfr 
im z; \cfr 
nm c; \rc  
im c; \rc  
"nm rr \rr
nm ra \ra 
nm fm \im 
"=================================================== to run the current c or cpp code
"=================================================== for c.vim
autocmd FileType c,cpp map <buffer> <leader><space> :w<cr>:make<cr>
nmap cn :cn<cr><cr><cr>
nmap cp :cp<cr><cr><cr>
"nmap <leader>cp :cp<cr>
nmap <leader>cw :cw 10<cr>
nmap c<space> :cclose<cr><cr>  " to close the buffer window
nmap <leader><space> :copen
nmap de !!date<cr> 
"nmap ;p o<esc>0i//====================================================<esc>d$o<esc>xxi<tab>
"

"#=================================================== for Powerline

let g:Powerline_symbols = 'fancy'

set fillchars+=stl:\ ,stlnc:\ 
"============================================= for NERD_Commenter
let g:vimgdb_debug_file = ""
run macros/gdb_mappings.vim
map <F2> :run macros/gdb_mappings.vim<CR>
""================================================ for nerdtree

"let g:loaded_nerdtree_fs_menu = 1
"Q. How can I open a NERDTree automatically when vim starts up?
autocmd vimenter * NERDTree
autocmd VimEnter * wincmd p " make the consor in the main window
"Q. How can I open a NERDTree automatically when vim starts up if no files
autocmd vimenter * if !argc() | NERDTree | endif
"Q. How can I map a specific key or shortcut to open NERDTree?
"A. Stick this in your vimrc to open NERDTree with Ctrl+n (you can set
"whatever key you want): 
map <leader>f :NERDTreeToggle<CR>
"Q. How can I close vim if the only window left open is a NERDTree?
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
 "NERD Tree
let NERDChristmasTree=1
let NERDTreeAutoCenter=1

"let g:NERDTreeAutoDeleteBuffer = 0
let NERDChristmasTree=1
let NERDTreeAutoCenter=1
let NERDTreeBookmarksFile=$VIM.'\Data\NerdBookmarks.txt'
let NERDTreeMouseMode=2
let NERDTreeShowBookmarks=1
let NERDTreeShowFiles=1
let NERDTreeShowHidden=1
let NERDTreeShowLineNumbers=1
let NERDTreeWinPos='left'
let NERDTreeWinSize=21
"================================================ map for bash-support.vim note
im <leader>ch \cfdh 
nm <leader>ch <leader>cfdh 
imap <leader>kf \cfu
nmap <leader>kf \cfu
imap <leader>kc \ckc
nmap <leader>kc \ckc

"=================================================== command line
nmap <leader>go \su

imap <leader>kh \ch
nmap <leader>kh \ch
imap <leader>kt \ckt
nmap <leader>kt \ckt
imap <leader>kw \ckw
nmap <leader>kw \ckw
imap <leader>kb \ckb
nmap <leader>kb \ckb
imap <leader>kn \ckn
nmap <leader>kn \ckn
"========================================== echo this line
"nmap <leader>ke ^iecho<space>"<esc>A"<esc>0j   
nmap <leader>kr \cr<esc>
imap <leader>ke \ce<esc>
nmap <leader>ke \ce<esc>
imap <leader>kr \cr<esc>
"========================================== showmarks setting
""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""
" Enable ShowMarks
let showmarks_enable = 0
" Show which marks
let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
" Ignore help, quickfix, non-modifiable buffers
let showmarks_ignore_type = "hqmt"
" Hilight lower & upper marks
let showmarks_hlline_lower = 1
let showmarks_hlline_upper = 1 
"
"
"<Leader>mt   - 打开/关闭ShowMarks插件
"<Leader>mo   - 强制打开ShowMarks插件
"<Leader>mh   - 清除当前行的标记
"<Leader>ma   - 清除当前缓冲区中所有的标记
"<Leader>mm   - 在当前行打一个标记，使用下一个可用的标记名 
"" Enable ShowMarks
nmap mt <leader>mt
nmap mh <leader>mh
nmap mn <leader>mm

" ============================================== for windows
nmap ;w <C-w><C-w>
" ============================================== path
set path="/usr/include/"
" ============================================== for rainbow parentheses
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" ============================================== for surround
" several nmap to use ysw'  ysW' ysb' ysB' ysw\ ysiw'
"=================================================== for mur.vim
let MRU_Max_Entries = 100
let MRU_Window_Height = 15
let MRU_Use_Current_Window = 1
let MRU_Auto_Close = 1
let MRU_Add_Menu = 1
let MRU_Max_Menu_Entries = 20
let MRU_Max_Submenu_Entries = 15
"set mouse=v
"================================================= for python
"= press rr to run current *.py

"=================================================== for pathogen.vim
call pathogen#infect()
"=================================================== ctrlp
let g:ctrlp_map = '<c-p>'
"=========================================================== for yankring
let g:yankring_enabled = 1
let g:yankring_history_dir='/Users/ctang/.vim/'
nmap <leader>r :YRShow<cr>
let g:yankring_window_use_horiz = 1  " Use vertical split
let g:yankring_window_width = 30
let g:yankring_window_increment = 50

"============================================================= statusline
"=================================================== press rr to run current *.scpt
au BufRead *.scpt map <buffer> rr :w<CR>:!tmux send-keys -t right 'osascript %:p' C-m &  <CR>

"==============================================================================
"USAGE                                                      *for Bash Shell*
au BufRead *.sh map <buffer> rr :w<CR>:!tmux send-keys -t right 'bash %:p' C-m &  <CR>
au BufRead *.sh map <buffer> ra :w<CR>:!tmux send-keys -t right 'bash %:p $(eval echo )' C-m & 

"==============================================================================
"USAGE                                                      *for MATLAB*
autocmd BufRead *.m map <buffer> rr :w<CR>:!NAME=%; matlab -nodesktop -nosplash -r ${NAME\%.m} <CR>

autocmd FileType m nmap <leader>p o<esc>0i%===================================================<space>
nmap <leader>uu o<esc>0i#---------------------------------------------------<space>
"==============================================================================
"USAGE                                                      *for ncl*
autocmd BufRead *.ncl map <buffer> rr :w<CR>:!/usr/bin/env ncl % <CR>
"==============================================================================
"USAGE                                                      *for ncl*
autocmd BufRead *.gs map <buffer> rr :w<CR>:!/usr/bin/env grads -lbc "run %" <CR>
"grads -lbc "run stdmap.temp.gs"
nmap <leader>99 :!cat % <CR>
set smarttab
"==============================================================================
"USAGE                                                      *for grads file *.gs*
"only 2 spaces
autocmd BufNewFile,BufRead *.html,*.htm,*.css,*.gs set shiftwidth=2 
"#=================================================== for indetation
"==============================================================================
"USAGE                                                      *for Index Guides*
"Indent Guides is a plugin for visually displaying indent levels in Vim
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=22
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=140
let g:indent_guides_start_level=2
let g:indent_guides_guide_size = 1

set ts=4 sw=4 et
" ts = tabstop : how many space = 1 tab
" sw = shiftwidth : how much index
" tabstop=X ts 编辑时一个TAB字符占多少个空格的位置。
" (no)expandtab (no)et
" 是否将输入的TAB自动展开成空格。开启后要输入TAB，需要Ctrl-V<TAB>
" softtabstop=X sts 
" 方便在开启了et后使用退格（backspace）键，每次退格将删除X个空格
" (no)smarttab (no)started
" 开启时，在行首按TAB将加入sw个空格，否则加入ts个空格。


" 从第二层开始可视化显示缩进
" " 色块宽度
" " 快捷键 i 开/关缩进可视化
"==============================================================================

""=================================================== for Jedi
"let g:jedi#auto_initialization = 1
""There are also some VIM options (like completeopt and key defaults) which are automatically initialized, but you can skip this:

""let g:jedi#auto_vim_configuration = 0
""If you are a person who likes to use VIM-buffers not tabs, you might want to put that in your .vimrc:

""let g:jedi#use_tabs_not_buffers = 0
""If you are a person who likes to use VIM-splits, you might want to put this in your .vimrc:

"let g:jedi#use_splits_not_buffers = "left"
""This options could be "left", "right", "top", "bottom" or "winwidth". It will decide the direction where the split open.

""Jedi automatically starts the completion, if you type a dot, e.g. str., if you don't want this:

""let g:jedi#popup_on_dot = 0
""Jedi selects the first line of the completion menu: for a better typing-flow and usually saves one keypress.

"let g:jedi#popup_select_first = 0
""Jedi displays function call signatures in insert mode in real-time, highlighting the current argument. The call signatures can be displayed as a pop-up in the buffer (set to 1, the default), which has the advantage of being easier to refer to, or in Vim's command line aligned with the function call (set to 2), which can improve the integrity of Vim's undo history.

"let g:jedi#show_call_signatures = "1"
""Here are a few more defaults for actions, read the docs (:help jedi-vim) to get more information. If you set them to "", they are not assigned.

""NOTE: subject to change!

"let g:jedi#goto_command = "<leader>d"
"let g:jedi#goto_assignments_command = "<leader>g"
"let g:jedi#goto_definitions_command = ""
"let g:jedi#documentation_command = "K"
"let g:jedi#usages_command = "<leader>n"
"let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>y"
""Finally, if you don't want completion, but all the other features, use:

"let g:jedi#completions_enabled = 1
""=================================================== for statistic
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
""=================================================== command line argument for py

""------------------------------------------------------------------------------
""  Python_Input : Input after a highlighted prompt    {{{1
""------------------------------------------------------------------------------
function! Python_Input ( promp, text, ... )
    echohl Search																					" highlight prompt
    call inputsave()																			" preserve typeahead
    if a:0 == 0 || empty(a:1)
        let retval	=input( a:promp, a:text )
    else
        let retval	=input( a:promp, a:text, a:1 )
    endif
    call inputrestore()																		" restore typeahead
    echohl None																						" reset highlighting
    let retval  = substitute( retval, '^\s\+', "", "" )		" remove leading whitespaces
    let retval  = substitute( retval, '\s\+$', "", "" )		" remove trailing whitespaces
    return retval
endfunction    " ----------  end of function Python_Input ----------
"
function! PythonCmdLineArguments ()
    let	prompt	= 'Python command line arguments for "'.expand("%").'" : '
    if exists("b:PythonCmdLineArgs")
        let	b:PythonCmdLineArgs= Python_Input( prompt, b:PythonCmdLineArgs )
    else
        let	b:PythonCmdLineArgs= Python_Input( prompt , "" )
    endif
    "return b:PythonCmdLineArgs
    "echo b:PythonCmdLineArgs
    "let b:tssdf='jjjjjjjjjjjj'
    "echo b:tssdf
    "prompt = b:tssdf
endfunction    " ----------  end of function PythonCmdLineArguments ----------

autocmd BufRead *.py map <buffer> ra :!python % $(eval echo 
au BufRead *.py map <buffer> rr :w<CR>:!tmux send-keys -t right '/usr/bin/env python %:p' C-m &  <CR>
"autocmd BufRead *.py map <buffer> ra :call PythonCmdLineArguments()<CR>
"au BufRead *.py map <buffer> rr :w<CR>:echo b:PythonCmdLineArgs<CR> 
"au BufRead *.py map <buffer> rr :w<CR>:!/usr/bin/env python % $(:echo b:PythonCmdLineArgs)<CR>
"au BufRead *.py map <buffer> rr :w<CR>:echo b:PythonCmdLineArgs<CR> 
"au BufRead *.py map <buffer> rr :w<CR>:echo system("echo <buffer> b:PythonCmdLineArgs")
"exe "imenu <silent> ".s:BASH_Root.'&Run.Bash\ cmd\.\ line\ &arg\.<Tab>\\rba                  <C-C>:call BASH_BashCmdLineArguments()<CR>'
"


"to set a underline
set cursorline



"It is possible to highlight the entire line permanently (mapped to key \l):
nnoremap <silent> <Leader>l :exe "let m = matchadd('WildMenu','\\%" . line('.') . "l')"<CR>

"Or one could only highlight the word underneath the cursor (mapped to key \h):
nnoremap <silent> <Leader>h :exe "let m=matchadd('WildMenu','\\<\\w*\\%" . line(".") . "l\\%" . col(".") . "c\\w*\\>')"<CR>

"To highlight the words contained in the virtual column (mapped to \c):
nnoremap <silent> <Leader>c :exe "let m=matchadd('WildMenu','\\<\\w*\\%" . virtcol(".") . "v\\w*\\>')"<CR>

"And finally, one can clear the permanent highlights (mapped to \Enter):
nnoremap <silent> <Leader><CR> :call clearmatches()<CR>
"=================================================== for gnuplot v5 in /usr/local/bin/gnuplot
au BufRead *.gps map <buffer> rr :w<CR>:!tmux send-keys -t right '/usr/local/bin/gnuplot %:p' C-m &  <CR>


"=================================================== to print with line number
set printoptions=number:y
"set list
"=================================================== for R 
au BufRead *.r map <buffer> rr :w<CR>:!tmux send-keys -t right 'Rscript %:p' C-m &  <CR>

"#=================================================== for CtrlP
nmap <leader>e :CtrlP<CR>

"#=================================================== for syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"#=================================================== 
"How can I cause the QuickFix window to close after I select an item in it?
autocmd FileType qf nnoremap <buffer> <CR> <CR>:cclose<CR>
"=================================================== markdown
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_folding_style_pythonic = 1
let g:vim_markdown_override_foldtext = 0

"Set header folding level
let g:vim_markdown_folding_level = 6

"Disable Default Key Mappings
let g:vim_markdown_no_default_key_mappings = 1

"Enable TOC window auto-fit
let g:vim_markdown_toc_autofit = 1

"Text emphasis restriction to single-lines
let g:vim_markdown_emphasis_multiline = 0

"Syntax Concealing
set conceallevel=2

"To disable conceal regardless of conceallevel setting, add the following to your .vimrc:
let g:vim_markdown_conceal = 0

let g:vim_markdown_math = 1
let g:vim_markdown_json_frontmatter = 1

"Adjust new list item indent
let g:vim_markdown_new_list_item_indent = 2


"#=================================================== for MRU mru
nmap <leader>uu :MRU<cr>

